:================yes=================:
goto

if, else if, else
switch.. case

= присваивание
% остаток от деления
* умножение
/ деление
+ сложение
– вычитание

== равенство (a == b)
!= неравенство (a != b)
>= больше или равно
<= меньше или равно
> больше
< меньше
! логическое НЕ, отрицание. Аналог – оператор not
&& логическое И. Аналог – оператор and
|| логическое ИЛИ. Аналог – оператор or

++ (плюс плюс) инкремент: a++ равносильно a = a + 1
-- (минус минус) декремент: a -- равносильно a = a – 1
+= составное сложение: a += 10 равносильно a = a + 10
-= составное вычитание: a -= 10 равносильно a = a – 10
*= составное умножение: a *= 10 равносильно a = a * 10
/= составное деление: a /= 10 равносильно a = a / 10
%= прибавить остаток от деления: a %= 10 равносильно a = a + a % 10
&= составное битовое И: a &= b равносильно a = a & b
^= составное исключающее ИЛИ: a ^= b равносильно a = a ^ b
|= составное ИЛИ: a |= b равносильно a = a | b

& битовое И
<< битовый сдвиг влево
>> битовый сдвиг вправо
^ битовое исключающее ИЛИ (аналогичный оператор – xor)
| битовое ИЛИ
~ битовое НЕ



Базис	Префикс	Пример	Особенности
2 (двоичная)	B или 0b (ноль бэ)	B1101001	цифры 0 и 1
8 (восьмеричная)	0 (ноль)	0175	цифры 0 – 7
10 (десятичная)	нет	100500	цифры 0 – 9
16 (шестнадцатеричная)	0x (ноль икс)	0xFF21A	цифры 0-9, буквы A-F

u или U – перевод в формат unsigned int (от 0 до 65’535). Пример: 36000u
l или L – перевод в формат long (-2 147 483 648… 2 147 483 647). Пример: 325646L
ul или UL – перевод в формат unsigned long (от 0 до 4 294 967 295). Пример: 361341ul



attachInterrupt(pin, ISR, mode)

LOW – срабатывает при сигнале LOW на пине
RISING – срабатывает при изменении сигнала на пине с LOW на HIGH
FALLING – срабатывает при изменении сигнала на пине с HIGH на LOW 
CHANGE – срабатывает при изменении сигнала (с LOW на HIGH и наоборот)

detachInterrupt(pin)
interrupts()
noInterrupts()



F_CPU				Частота процессора в Гц
__DATE__			Дата компиляции в формате Feb 28 2019
__TIME__



bit(val) – считает значение байта val по порядку (0 будет 1, 1 будет 2, 2 будет 4, 3 будет 8 и.т.д.)
bitClear(x, n) – устанавливает на 0 бит, находящийся в числе x под номером n
bitSet(x, n) – устанавливает на 1 бит, находящийся в числе x под номером n
bitWrite(x, n, b) – устанавливает на значение b (0 или 1) бит , находящийся в числе x под номером n
bitRead(x, n) – возвращает значение бита (0 или 1), находящегося в числе x под номером n
highByte(x) – извлекает и возвращает старший (крайний левый) байт переменной типа word (либо второй младший байт переменной, если ее тип занимает больше двух байт).
lowByte(x) – извлекает и возвращает младший (крайний правый) байт переменной (например, типа word).
bit_is_set(x, n) – проверка (возвращает 1 если включен) бита n в числе x
bit_is_clear(x, n) – проверка (возвращает 1 если выключен) бита n в числе x
loop_until_bit_is_set(x, n) – висеть в цикле (ждать), пока включен бит n в числе x
loop_until_bit_is_clear(x, n)