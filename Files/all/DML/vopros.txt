:=================?==================:
?
 Укороченная запись условия: (логика) ? правда : ложь. Подробнее – в этом уроке.
int с = (a > b) ? 10 : -20;  // если a > b, то с = 10. Если нет, то с = -20



Название	Альт. название  	Вес	Диапазон	                        			 Особенность
boolean	        bool	              1 байт	0 или 1, true или false	              			 Логическая переменная. bool на Arduino тоже занимает 1 байт, а не бит!
char	        int8_t	              1 байт	-128… 127	                       			Хранит номер символа из таблицы символов ASCII
byte	        uint8_t	              1 байт	0… 255	 
int	        int16_t, short	      2 байта	-32 768… 32 767	 
unsigned int	uint16_t, word	      2 байта	0… 65 535	 
long	        int32_t	              4 байта	-2 147 483 648… 2 147 483 647         			– 2 миллиарда… 2 миллиарда
unsigned long	uint32_t	      4 байта	0… 4 294 967 295	               			0… 4 миллиарда…
float	           –	              4 байта	-3.4028235E+38… 3.4028235E+38	       			Хранит числа с плавающей точкой (десятичные дроби). Точность: 6-7 знаков
double	           –	              4 байта	Для AVR то же самое, что float. А так он 8 байт
–	        int64_t	              8 байт	-(2^64)/2… (2^64)/2-1					Очень большие числа. Serial не умеет такие выводить
–	        uint64_t	      8 байт	2^64-1	         					Очень большие числа. Serial не умеет такие выводить

wchar_t – 16 битный символ
char16_t – 2-х байтный char
char32_t – 4-х байтный char



struct <ярлык> {
  <тип> <имя переменной 1>;
  <тип> <имя переменной 2>;
  <тип> <имя переменной 3>;
};

enum <ярлык> {<имя1>, <имя2>, <имя3>, <имя4>, <имя5>};

class /*имя класса*/
{
  private:
  // список свойств и методов для использования внутри класса
  public:
  // список методов доступных другим функциям и объектам программы
  protected:
  // список средств, доступных при наследовании
};



// указываем количество ячеек и всё, дальше можно с ними работать
int myInts[6];
// указываем содержимое ячеек, компилятор сам посчитает их количество
int myPins[] = {2, 4, 8, 3, 6};
// указываем и то и то, количество ячеек в [ ] должно совпадать с { } или быть больше!
float Sens[3] = {0.2, 0.4, -8.5};
// храним символы
char message[6] = "hello";
// помним, что порядок ячеек начинается с нуля!
myInts[0] = 10;   // записать 10 в ячейку 0 массива myInts



String string0 = "Hello String";              // заполняем словами в кавычках
String string1 = String("lol ") + String("kek");  // сумма двух строк
String string2 = String('a');                 // строка из символа в одинарных кавычках
String string3 = String("This is string");    // конвертируем строку в String
String string4 = String(string3 + " more");   // складываем строку string3 с текстом в кавычках
String string5 = String(13);                  // конвертируем из числа в String
String string6 = String(20, DEC);             // конвертируем из числа с указанием базиса (десятичный)
String string7 = String(45, HEX);             // конвертируем из числа с указанием базиса (16-ричный)
String string8 = String(255, BIN);            // конвертируем из числа с указанием базиса (двоичный)
String string9 = String(5.698, 3);            // из float с указанием количества знаков после запятой (тут 3)
// можно формировать название из кусочков, например для работы с файлами
#define NAME "speed"
#define TYPE "-log"
#define EXT ".txt"
// при сложении достаточно указать String 1 раз для первой строки
String filename = String(NAME) + TYPE + EXT;  // filename будет равна speed-log.txt
// доступ к элементу строки работает по такому же механизму, как массив
string1[0] = "a";
// теперь вместо Hello String у нас aello String



const – константа, такую переменную нельзя изменить (будет ошибка). const int val = 10;
static – позволяет объявить локальную переменную внутри функции, и эта переменная не будет заново переобъявляться при повторном вызове функции. Эдакая локальная глобальная переменная. Почитать
volatile – указывает компилятору, что переменную не нужно оптимизировать, что её значение может меняться извне. Такой спецификатор должен быть применён к переменным, которые меняют своё значение в прерывании. Почитать
extern – указывает компилятору, что эта переменная объявлена в другом файле программы, но мы хотим пользоваться именно ей, а не создавать новую с таким же именем в этом файле программы. Позволяет читать/записывать в переменные, созданные в других файлах (библиотеках)!



random(max) – возвращает случайное число в диапазоне от 0 до (max – 1)
random(min, max) – возвращает случайное число в диапазоне от min до (max – 1)
randomSeed(value)



malloc() – выделение памяти
free() – освобождение памяти
new() – выделение памяти (полный аналог malloc)
delete() – освобождение памяти (полный аналог free)
memset() – заполняет блоки памяти по адресу